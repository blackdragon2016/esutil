# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.3
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cosmolib', [dirname(__file__)])
        except ImportError:
            import _cosmolib
            return _cosmolib
        if fp is not None:
            try:
                _mod = imp.load_module('_cosmolib', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cosmolib = swig_import_helper()
    del swig_import_helper
else:
    import _cosmolib
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


NPTS = _cosmolib.NPTS
VNPTS = _cosmolib.VNPTS
FOUR_PI_G_OVER_C_SQUARED = _cosmolib.FOUR_PI_G_OVER_C_SQUARED
CLIGHT = _cosmolib.CLIGHT

def gauleg(*args):
  return _cosmolib.gauleg(*args)
gauleg = _cosmolib.gauleg

def ez_inverse(*args):
  return _cosmolib.ez_inverse(*args)
ez_inverse = _cosmolib.ez_inverse

def ez_inverse_vec(*args):
  return _cosmolib.ez_inverse_vec(*args)
ez_inverse_vec = _cosmolib.ez_inverse_vec

def ez_inverse_integral(*args):
  return _cosmolib.ez_inverse_integral(*args)
ez_inverse_integral = _cosmolib.ez_inverse_integral

def cdist(*args):
  return _cosmolib.cdist(*args)
cdist = _cosmolib.cdist

def cdist_vec1(*args):
  return _cosmolib.cdist_vec1(*args)
cdist_vec1 = _cosmolib.cdist_vec1

def cdist_vec2(*args):
  return _cosmolib.cdist_vec2(*args)
cdist_vec2 = _cosmolib.cdist_vec2

def cdist_2vec(*args):
  return _cosmolib.cdist_2vec(*args)
cdist_2vec = _cosmolib.cdist_2vec

def tcdist(*args):
  return _cosmolib.tcdist(*args)
tcdist = _cosmolib.tcdist

def tcdist_vec1(*args):
  return _cosmolib.tcdist_vec1(*args)
tcdist_vec1 = _cosmolib.tcdist_vec1

def tcdist_vec2(*args):
  return _cosmolib.tcdist_vec2(*args)
tcdist_vec2 = _cosmolib.tcdist_vec2

def tcdist_2vec(*args):
  return _cosmolib.tcdist_2vec(*args)
tcdist_2vec = _cosmolib.tcdist_2vec

def angdist(*args):
  return _cosmolib.angdist(*args)
angdist = _cosmolib.angdist

def angdist_vec1(*args):
  return _cosmolib.angdist_vec1(*args)
angdist_vec1 = _cosmolib.angdist_vec1

def angdist_vec2(*args):
  return _cosmolib.angdist_vec2(*args)
angdist_vec2 = _cosmolib.angdist_vec2

def angdist_2vec(*args):
  return _cosmolib.angdist_2vec(*args)
angdist_2vec = _cosmolib.angdist_2vec

def lumdist(*args):
  return _cosmolib.lumdist(*args)
lumdist = _cosmolib.lumdist

def lumdist_vec1(*args):
  return _cosmolib.lumdist_vec1(*args)
lumdist_vec1 = _cosmolib.lumdist_vec1

def lumdist_vec2(*args):
  return _cosmolib.lumdist_vec2(*args)
lumdist_vec2 = _cosmolib.lumdist_vec2

def lumdist_2vec(*args):
  return _cosmolib.lumdist_2vec(*args)
lumdist_2vec = _cosmolib.lumdist_2vec

def dV(*args):
  return _cosmolib.dV(*args)
dV = _cosmolib.dV

def dV_vec(*args):
  return _cosmolib.dV_vec(*args)
dV_vec = _cosmolib.dV_vec

def volume(*args):
  return _cosmolib.volume(*args)
volume = _cosmolib.volume

def scinv(*args):
  return _cosmolib.scinv(*args)
scinv = _cosmolib.scinv

def scinv_vec1(*args):
  return _cosmolib.scinv_vec1(*args)
scinv_vec1 = _cosmolib.scinv_vec1

def scinv_vec2(*args):
  return _cosmolib.scinv_vec2(*args)
scinv_vec2 = _cosmolib.scinv_vec2

def scinv_2vec(*args):
  return _cosmolib.scinv_2vec(*args)
scinv_2vec = _cosmolib.scinv_2vec
class cosmo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cosmo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cosmo, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cosmolib.new_cosmo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cosmolib.delete_cosmo
    __del__ = lambda self : None;
cosmo_swigregister = _cosmolib.cosmo_swigregister
cosmo_swigregister(cosmo)



